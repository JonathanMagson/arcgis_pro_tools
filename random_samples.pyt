# -*- coding: utf-8 -*-import arcpyimport randomclass Toolbox(object):    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the .pyt file)."""        self.label = "Sample Toolbox"        self.alias = "sampling_tools"        self.tools = [RandomSampleTool]class RandomSampleTool(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Create Random Sample"        self.description = "Creates a random sample from a feature class, with an option for stratified sampling."        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        # Initialize the params list at the beginning of the method        params = []         # Input Feature Class        param0 = arcpy.Parameter(            displayName="Input Feature Class",            name="in_feature_class",            datatype="GPFeatureLayer",            parameterType="Required",            direction="Input")        params.append(param0)         # Output Feature Class        param1 = arcpy.Parameter(            displayName="Output Feature Class",            name="out_feature_class",            datatype="DEFeatureClass",            parameterType="Required",            direction="Output")        params.append(param1)         # Sample Percentage        param2 = arcpy.Parameter(            displayName="Sample Percentage",            name="sample_percentage",            datatype="GPDouble",            parameterType="Required",            direction="Input")        param2.value = 30  # Default value        params.append(param2)         # Stratify Field (Optional)        param3 = arcpy.Parameter(            displayName="Stratify Field (Optional)",            name="stratify_field",            datatype="Field",            parameterType="Optional",            direction="Input")        param3.parameterDependencies = [param0.name]        params.append(param3)         # Minimum Sample Size (if you're adding this parameter based on our previous discussion)        param4 = arcpy.Parameter(            displayName="Minimum Sample Size per Class",            name="min_samples",            datatype="GPLong",            parameterType="Required",            direction="Input")        param4.value = 10  # Default value        params.append(param4)         # Make sure to return the list of parameters at the end of the method        return params                  def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal validation is performed. This method is called whenever a parameter has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool parameter. This method is called after internal validation."""        return    def execute(self, parameters, messages):        input_fc = parameters[0].valueAsText        output_fc = parameters[1].valueAsText        sample_percentage = float(parameters[2].value)        stratify_field = parameters[3].valueAsText if parameters[3].valueAsText else None        min_samples = int(parameters[4].value)  # Retrieve the new parameter         self.create_random_sample(input_fc, output_fc, sample_percentage, stratify_field, min_samples)     def create_random_sample(self, input_fc, output_fc, sample_size, stratify_by=None, min_samples=10):        arcpy.env.overwriteOutput = True        selected_ids = []         if stratify_by:            # Stratified sampling            categories = {row[1]: [] for row in arcpy.da.SearchCursor(input_fc, ['OID@', stratify_by])}            for oid, category in arcpy.da.SearchCursor(input_fc, ['OID@', stratify_by]):                categories[category].append(oid)             for ids in categories.values():                if len(ids) < min_samples:                    selected_ids.extend(ids)  # If less than min_samples, take all                else:                    n = max(min_samples, int(len(ids) * (sample_size / 100.0)))  # Ensure at least min_samples or all if less                    selected_ids.extend(random.sample(ids, n))        else:            # Simple random sampling            with arcpy.da.SearchCursor(input_fc, ['OID@']) as cursor:                all_ids = [oid for oid, in cursor]            n = max(min_samples, int(len(all_ids) * (sample_size / 100.0)))  # Adjusted to ensure at least min_samples            selected_ids = random.sample(all_ids, n)         if selected_ids:            arcpy.MakeFeatureLayer_management(input_fc, "flayer")            arcpy.SelectLayerByAttribute_management("flayer", "NEW_SELECTION", "OBJECTID IN ({})".format(','.join(map(str, selected_ids))))            arcpy.CopyFeatures_management("flayer", output_fc)            arcpy.AddMessage(f"Sample created successfully. Output at: {output_fc}")        else:            arcpy.AddMessage("No features were selected for sampling.")