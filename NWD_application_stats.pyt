# -*- coding: utf-8 -*-import arcpyimport refrom collections import defaultdictimport csvclass Toolbox(object):    def __init__(self):        """Define the toolbox."""        self.label = "NWD stats Toolbox"        self.alias = "NWD_application_stats_analysis"        self.tools = [KeywordAnalysisTool]class KeywordAnalysisTool(object):    def __init__(self):        """Define the tool."""        self.label = "NWD_application_stats_analysis"        self.description = "Analyzes comments for keywords and counts occurrences per month."        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        # Feature class with comments        fc_comments = arcpy.Parameter(            displayName="Input Feature Class with Comments",            name="fc_comments",            datatype="GPFeatureLayer",            parameterType="Required",            direction="Input")        # Optional polygon feature class        fc_polygon = arcpy.Parameter(            displayName="Optional: Zonal Polygon Feature Class",            name="fc_polygon",            datatype="GPFeatureLayer",            parameterType="Optional",            direction="Input")        # Field name to use as ID for the polygons, default is "LGAname"        polygon_id_field = arcpy.Parameter(            displayName="Optional: Zonal Polygon Field Name",            name="polygon_id_field",            datatype="GPString",            parameterType="Optional",            direction="Input")        # Output CSV file path        output_csv = arcpy.Parameter(            displayName="Output CSV File",            name="output_csv",            datatype="DEFile",            parameterType="Required",            direction="Output")        params = [fc_comments, fc_polygon, polygon_id_field, output_csv]        return params    def execute(self, parameters, messages):        """The source code of the tool."""        fc_comments_path = parameters[0].valueAsText        fc_polygon_path = parameters[1].valueAsText        polygon_id_field_name = parameters[2].valueAsText if parameters[2].valueAsText else "LGAname"        output_csv_path = parameters[3].valueAsText        # Initialize variables        pattern = re.compile(r'(\d{1,2})[/-](\d{2})\s+[^\d]*(cult|herb|flush|harv)', re.IGNORECASE)        keyword_counts = defaultdict(lambda: defaultdict(lambda: defaultdict(int)))  # Nested dict for counts        # Function to update counts, nested by polygon ID (if applicable) and month        def update_counts(text, polygon_id="Global"):            if text:                matches = pattern.findall(text)                for match in matches:                    month, _, keyword = match                    keyword_counts[polygon_id][int(month)][keyword.lower()] += 1        if fc_polygon_path and polygon_id_field_name:  # If polygon feature class and field name are provided            arcpy.AddMessage("Processing by polygon...")            with arcpy.da.SearchCursor(fc_polygon_path, ["SHAPE@", polygon_id_field_name]) as polygon_cursor:                for polygon, polygon_id in polygon_cursor:                    arcpy.SelectLayerByLocation_management(                        in_layer=fc_comments_path, overlap_type="INTERSECT", select_features=polygon,                        selection_type="NEW_SELECTION")                    with arcpy.da.SearchCursor(fc_comments_path, ["Comments", "PR_Comments"]) as comments_cursor:                        for comments, pr_comments in comments_cursor:                            update_counts(comments, str(polygon_id))                            update_counts(pr_comments, str(polygon_id))        else:  # Process without considering polygons            arcpy.AddMessage("Processing globally...")            with arcpy.da.SearchCursor(fc_comments_path, ["Comments", "PR_Comments"]) as comments_cursor:                for comments, pr_comments in comments_cursor:                    update_counts(comments)                    update_counts(pr_comments)        # Write results to CSV        with open(output_csv_path, 'w', newline='') as csvfile:            writer = csv.writer(csvfile)            writer.writerow(['PolygonID', 'Month', 'Cult Count', 'Herb Count', 'Flush Count', 'Harv Count'])            for polygon_id in keyword_counts:                for month in range(1, 13):                    row = [polygon_id, month]                    row.extend([keyword_counts[polygon_id][month][k] for k in ['cult', 'herb', 'flush', 'harv']])                    writer.writerow(row)        arcpy.AddMessage(f"Output CSV has been created at: {output_csv_path}")